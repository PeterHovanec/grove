"use strict";class t{constructor(e={key:"",node:null},r=!1){if(!(r||e.key&&"string"==typeof e.key))throw new Error("Parent key cannot be null, empty or not type of string!");if(!(r||e.node&&e.node instanceof t))throw new Error("Parent node cannot be null, empty or not class of TrieNode");this._parent=e,this._children={},this.data=null,this.isEndOfWord=!1,this.word=null}get parent(){return this._parent}get children(){return this._children}update(t){this.isEndOfWord=!!t,this.data=t,this.isEndOfWord||(this.word=null)}unlink(){this._parent={key:"",node:null}}hasChildren(){return Object.keys(this._children).length>0}deleteChild(t){this._children[t]&&(this._children[t].update(null),this._children[t].unlink(),this._children[t].word=null,delete this._children[t])}addChild(t,e){if(!t||!e)return null;const r=this._children[t];return this._children[t]=e,r}hasChild(t){return!!this._children[t]}}class e{constructor(t={key:null,node:null},r=!1,n=2){if(!r&&(null===t.key||"number"!=typeof t.key))throw new Error("Parent key cannot be null or not type of number!");if(!(r||t.node&&t.node instanceof e))throw new Error("Parent node cannot be null or not instance of CardinalTrieNode");this._parent=t,this.k=n,this._children=new Array(n).fill(null),this.data=null,this.isEndOfWord=!1,this.word=null}get parent(){return this._parent}get children(){return this._children}update(t){this.isEndOfWord=!!t,this.data=t,this.isEndOfWord||(this.word=null)}unlink(){this._parent={key:null,node:null}}hasChildren(){return this._children.some((t=>null!==t))}deleteChild(t){t<0||t>=this.k||null===this._children[t]||(this._children[t].update(null),this._children[t].unlink(),this._children[t].word=null,this._children[t]=null)}addChild(t,e){if(t<0||t>=this.k||!e)return null;const r=this._children[t];return this._children[t]=e,r}hasChild(t){return t>=0&&t<this.k&&null!==this._children[t]}}exports.CardinalTrie=class{constructor(t=2,r=null){if(this.k=t,this._root=new e(null,!0,t),this._lastIndex=1,r){if(r.length!==t)throw new Error("Alphabet length must match the k");this.alphabet=r,this.charToIndex={},this.indexToChar={};for(let t=0;t<r.length;t++){const e=r[t];this.charToIndex[e]=t,this.indexToChar[t]=e}}else this.alphabet=null,this.charToIndex=null,this.indexToChar=null}get root(){return this._root}insert(t,e){return this._insertWord(t,e,this._root,0)}_insertWord(t,r,n,h){if(h===t.length)return n.word=t,n.update(r||this._getNextIndex()),!0;let i;if(this.alphabet){const e=t.charAt(h);if(!(e in this.charToIndex))throw new Error("Invalid character in word: "+e);i=this.charToIndex[e]}else if(i=parseInt(t.charAt(h),10),isNaN(i)||i<0||i>=this.k)throw new Error("Invalid character in word: "+t.charAt(h));return n.hasChild(i)||n.addChild(i,new e({key:i,node:n},!1,this.k)),this._insertWord(t,r,n.children[i],h+1)}search(t){const e=this._searchNode(t,this._root,0);return e?e.data:null}_searchNode(t,e,r){if(r===t.length)return e.isEndOfWord?e:null;let n;if(this.alphabet){const e=t.charAt(r);if(!(e in this.charToIndex))return null;n=this.charToIndex[e]}else if(n=parseInt(t.charAt(r),10),isNaN(n)||n<0||n>=this.k)return null;return e.hasChild(n)?this._searchNode(t,e.children[n],r+1):null}delete(t){const e=this._searchNode(t,this._root,0);return!!e&&(e.hasChildren()?(e.update(null),!0):(this._deleteWord(e),!0))}_deleteWord(t){if(t===this._root)return;const e=t.parent;e.node.deleteChild(e.key),e.node.hasChildren()||this._deleteWord(e.node)}update(t,e){const r=this._searchNode(t,this._root,0);return!!r&&(r.update(e),!0)}getDataNode(t){return this._searchNode(t,this._root,0)}getPath(t){const e=[];e.push(this._root);for(let r=1;r<=t.length;r++)e.push(this._searchNode(t.substring(0,r),this._root,0));return e}_getNextIndex(){return this._lastIndex++}},exports.CardinalTrieNode=e,exports.Trie=class{constructor(){this._root=new t(null,!0),this._lastIndex=1}get root(){return this._root}insert(t,e){return this._insertWord(t,e,this._root,0)}_insertWord(e,r,n,h){if(h===e.length)return n.word=e,n.update(r||this._getNextIndex()),!0;let i=e.charAt(h);return n.hasChild(i)||n.addChild(i,new t({key:i,node:n})),this._insertWord(e,r,n.children[i],h+1)}search(t){const e=this._searchNode(t,this._root,0);return e?e.data:null}_searchNode(t,e,r){if(r===t.length)return e.isEndOfWord?e:null;let n=t.charAt(r);return e.hasChild(n)?this._searchNode(t,e.children[n],r+1):null}delete(t){const e=this._searchNode(t,this._root,0);return!!e&&(e.hasChildren()?(e.update(null),!0):(this._deleteWord(e),!0))}_deleteWord(t){if(t===this._root)return;const e=t.parent;e.node.deleteChild(e.key),e.node.hasChildren()||this._deleteWord(e.node)}update(t,e){const r=this._searchNode(t,this._root,0);return!!r&&(r.update(e),!0)}getDataNode(t){return this._searchNode(t,this._root,0)}getPath(t){const e=[];e.push(this._root);for(let r=1;r<=t.length;r++)e.push(this._searchNode(t.substring(0,r),this._root,0));return e}_getNextIndex(){return this._lastIndex++}},exports.TrieNode=t;
//# sourceMappingURL=grove.js.map
